-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/haskell-project#readme</a>
@package haskell-project
@version 0.1.0.0


module Fetch

-- | The <a>download</a> function takes a URL of a page, and fetches and
--   returns the json data present in that page. It checks whether the
--   request gets a successful response.
download :: URL -> IO ByteString


module Types

-- | This is the data structure that will represent an Actor entry
data Actor
Actor :: Int -> String -> String -> Actor

-- | The <tt>actor_id</tt> method returns the id by which an actor entry is
--   indexed
[actor_id_] :: Actor -> Int

-- | The <a>actor_first_name_</a> method returns the first name of an actor
--   entry
[actor_first_name_] :: Actor -> String

-- | The <a>actor_last_name_</a> method returns the last name of an actor
--   entry
[actor_last_name_] :: Actor -> String

-- | A Cast entry associates an actor with a movie
data Cast
Cast :: Int -> Int -> Cast

-- | The <a>fk_movie_cast</a> method returns the id of the movie in this
--   relation
[fk_movie_cast] :: Cast -> Int

-- | The <a>fk_actor_cast</a> method returns the id of the actor in this
--   relation
[fk_actor_cast] :: Cast -> Int

-- | This is the data structure that will represent a Genre entry
data Genre
Genre :: Int -> String -> String -> Genre

-- | The <a>genre_id_</a> method returns the id by which a genre entry is
--   indexed
[genre_id_] :: Genre -> Int

-- | The <a>genre_first_name_</a> method returns the first name of a genre
--   entry
[genre_first_name_] :: Genre -> String

-- | The <a>genre_second_name_</a> method returns the second name of a
--   genre entry
[genre_second_name_] :: Genre -> String

-- | A MovieGenre entry associates a genre with a movie
data MovieGenre
MovieGenre :: Int -> Int -> MovieGenre

-- | The <a>fk_movie_genre</a> method returns the id of the movie in this
--   MovieGenre relation
[fk_movie_genre] :: MovieGenre -> Int

-- | The <a>fk_genre_genre</a> method returns the id of the genre in this
--   MovieGenre relation
[fk_genre_genre] :: MovieGenre -> Int

-- | This is the data structure that will represent a Movie entry
data Movie
Movie :: Int -> String -> Int -> Movie

-- | The <a>movie_id_</a> method returns the id by which a movie entry is
--   indexed
[movie_id_] :: Movie -> Int

-- | The <a>title_</a> method returns the title of a movie entry
[title_] :: Movie -> String

-- | The <a>year_</a> method returns the year of a movie entry
[year_] :: Movie -> Int

-- | This is the data structure that will represent a raw Record object
data Record
Record :: String -> Int -> [String] -> [String] -> Record

-- | The <a>title</a> method returns the title present in a given json
--   record
[title] :: Record -> String

-- | The <a>year</a> method returns the year present in a given json record
[year] :: Record -> Int

-- | The <a>cast</a> method returns the list of actors present in a given
--   json record
[cast] :: Record -> [String]

-- | The <a>genres</a> method returns the list of genres present in a given
--   json record
[genres] :: Record -> [String]

-- | <a>Records</a> defines an alias for an array of Record's
newtype Records
Records :: [Record] -> Records

-- | The <a>records</a> method returns the list of records
[records] :: Records -> [Record]
instance GHC.Show.Show Types.Actor
instance GHC.Show.Show Types.Cast
instance GHC.Show.Show Types.Genre
instance GHC.Show.Show Types.MovieGenre
instance GHC.Show.Show Types.Movie
instance GHC.Generics.Generic Types.Record
instance GHC.Show.Show Types.Record
instance GHC.Generics.Generic Types.Records
instance GHC.Show.Show Types.Records
instance Data.Aeson.Types.FromJSON.FromJSON Types.Records
instance Data.Aeson.Types.FromJSON.FromJSON Types.Record
instance Database.SQLite.Simple.FromRow.FromRow Types.Movie
instance Database.SQLite.Simple.ToRow.ToRow Types.Movie
instance Database.SQLite.Simple.FromRow.FromRow Types.MovieGenre
instance Database.SQLite.Simple.ToRow.ToRow Types.MovieGenre
instance Database.SQLite.Simple.FromRow.FromRow Types.Genre
instance Database.SQLite.Simple.ToRow.ToRow Types.Genre
instance Database.SQLite.Simple.FromRow.FromRow Types.Cast
instance Database.SQLite.Simple.ToRow.ToRow Types.Cast
instance Database.SQLite.Simple.FromRow.FromRow Types.Actor
instance Database.SQLite.Simple.ToRow.ToRow Types.Actor


module Parse

-- | The <a>parseRecords</a> function turns the received raw json data into
--   either a String or a Records structure
parseRecords :: ByteString -> Either String Records


module Database

-- | The <a>initialiseDB</a> function prepares a database in the
--   `movies.sqlite` file to be used by the app
initialiseDB :: IO Connection

-- | The <a>getOrCreateMovie</a> function ensures the unique movie title
--   for that year exists in the database before returning it
getOrCreateMovie :: Connection -> String -> Int -> IO Movie

-- | The <a>getLastElement</a> connects an array of strings by spaces
getLastElement :: [String] -> String

-- | The <a>getOrCreateActor</a> function ensures the unique actor name
--   exists in the database before returning it
getOrCreateActor :: Connection -> String -> IO Actor

-- | The <a>iterateCast</a> function ensures every actor in a given cast is
--   saved into the database before associating it with a movie
iterateCast :: Connection -> Movie -> [String] -> IO ()

-- | The <a>getOrCreateGenre</a> function ensures the unique genre exists
--   in the database before returning it
getOrCreateGenre :: Connection -> String -> IO Genre

-- | The <a>iterateGenre</a> function ensures every genres in a given list
--   is saved into the database before associating it with a movie
iterateGenre :: Connection -> Movie -> [String] -> IO ()

-- | The <a>createRecord</a> function saves the full record of a given
--   movie into the database
createRecord :: Connection -> Record -> IO ()

-- | The <a>saveRecords</a> function saves the full record of all movies in
--   a list of movies into the database
saveRecords :: Connection -> [Record] -> IO ()

-- | The <a>databaseQueries</a> function opens the menu for the user to
--   perform queries on the database
databaseQueries :: Connection -> IO ()

-- | The <a>extractActorResults</a> transforms an array of Actor's into a
--   displayable string with the names of all the actors in the array
extractActorResults :: [Actor] -> String

-- | The <a>extractGenreResults</a> transforms an array of Genre's into a
--   displayable string with the names of all the genres in the array
extractGenreResults :: [Genre] -> String

-- | The <a>queryMovie</a> allows the user to see details of a movie with a
--   specific title
queryMovie :: Connection -> IO String

-- | The <a>queryActor</a> allows the user to see details of an actor with
--   a specific name
queryActor :: Connection -> IO String

-- | The <a>queryGenre</a> allows the user to see details of an genre with
--   a specific name
queryGenre :: Connection -> IO String

-- | The <a>queryYear</a> allows the user to see details of a specfic year
queryYear :: Connection -> IO String
